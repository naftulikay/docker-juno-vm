#!/usr/bin/env bash

function .join() {
  function .usage() {
    (
      echo "usage: .join separator args..."
      echo "Joins all arguments or stdin lines by a common string."
      echo "  separator A string to separate arguments by."
      echo "  args...   A list of strings to join by the separator."
      echo ""
      echo "PROTIP: For standard input, lines are split on (\r?\n) and on NULL bytes."
    ) >&2
    return 1
  }

  if [ -z "${1}" -o "${1}" == "-h" -o "${1}" == "--help" ]; then
    .usage || return 1
  fi

  local separator="$1"
  shift

  local args=("$@")

  # fail early.
  if [ -z "$separator" ] || [ ${#args[@]} -eq 0 -a ! -p /dev/fd/0 ]; then
    .usage || return 1
  fi

  if [ ${#args[@]} -gt 0 ]; then
    # join on args
    python -u <(
      echo "#/usr/bin/env python"
      echo "# -*- coding: utf-8 -*-"
      echo "from __future__ import print_function"
      echo "import re, sys"
      echo ""
      echo "separator=sys.argv[1]"
      echo "print(separator.join(sys.argv[2:]))"
    ) "${separator}" ${args[@]}
  elif [ -p /dev/fd/0 ]; then
    # split standard input on newlines or zeroes
    python -u <(
      echo "#/usr/bin/env python"
      echo "# -*- coding: utf-8 -*-"
      echo "from __future__ import print_function"
      echo "import re, sys"
      echo ""
      echo "nl=re.compile(r'(?:\\r?\\n|\\x00)')"
      echo "separator=sys.argv[1]"
      echo "arg_file=sys.argv[2]"
      echo "with open(arg_file, 'r') as f:"
      echo "  args=filter(lambda i: len(i) > 0, nl.split(f.read().decode('utf-8')))"
      echo "print(separator.join(args))"
    ) "${separator}" <(cat /dev/fd/0)
  fi
}

function .main() {
  local targets=("$@")

  echo "$0: waiting for targets: $( ( for target in ${targets[@]}; do echo $target ; done ) | .join ', ' )"
  echo "Please note that some targets may take 70-120 seconds to start."
  echo

  if [ ${#targets[@]} -eq 0 ]; then
    targets[0]="multi-user.target"
  fi

  for target in ${targets[@]} ; do
    .await-target $target
  done
}

function .await-target() {
  local target="${1:-multi-user.target}"
  local i=0
  local sleep_time=${2:-5}
  local max_retries=${3:-20}
  local iteration

  while ! systemctl status "$target" &>/dev/null && [ $i -lt $max_retries ]; do
    iteration=$(($i + 1))
    printf "[%02d/%02d] waiting %ds for systemd to reach target %s...\n" $iteration $max_retries $sleep_time $target
    sleep $sleep_time
    # increment our test cases
    i=$(($i + 1))
  done

  systemctl status "$target"
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
  set -e
  .main "$@"
fi
